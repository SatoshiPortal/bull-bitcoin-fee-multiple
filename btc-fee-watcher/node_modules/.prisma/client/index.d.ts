
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model FeeEstimate
 * 
 */
export type FeeEstimate = $Result.DefaultSelection<Prisma.$FeeEstimatePayload>
/**
 * Model MovingAverage
 * 
 */
export type MovingAverage = $Result.DefaultSelection<Prisma.$MovingAveragePayload>
/**
 * Model FeeIndex
 * 
 */
export type FeeIndex = $Result.DefaultSelection<Prisma.$FeeIndexPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more FeeEstimates
 * const feeEstimates = await prisma.feeEstimate.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more FeeEstimates
   * const feeEstimates = await prisma.feeEstimate.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.feeEstimate`: Exposes CRUD operations for the **FeeEstimate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeEstimates
    * const feeEstimates = await prisma.feeEstimate.findMany()
    * ```
    */
  get feeEstimate(): Prisma.FeeEstimateDelegate<ExtArgs>;

  /**
   * `prisma.movingAverage`: Exposes CRUD operations for the **MovingAverage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovingAverages
    * const movingAverages = await prisma.movingAverage.findMany()
    * ```
    */
  get movingAverage(): Prisma.MovingAverageDelegate<ExtArgs>;

  /**
   * `prisma.feeIndex`: Exposes CRUD operations for the **FeeIndex** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeeIndices
    * const feeIndices = await prisma.feeIndex.findMany()
    * ```
    */
  get feeIndex(): Prisma.FeeIndexDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    FeeEstimate: 'FeeEstimate',
    MovingAverage: 'MovingAverage',
    FeeIndex: 'FeeIndex'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'feeEstimate' | 'movingAverage' | 'feeIndex'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      FeeEstimate: {
        payload: Prisma.$FeeEstimatePayload<ExtArgs>
        fields: Prisma.FeeEstimateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeEstimateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeEstimateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          findFirst: {
            args: Prisma.FeeEstimateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeEstimateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          findMany: {
            args: Prisma.FeeEstimateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>[]
          }
          create: {
            args: Prisma.FeeEstimateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          createMany: {
            args: Prisma.FeeEstimateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeeEstimateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          update: {
            args: Prisma.FeeEstimateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          deleteMany: {
            args: Prisma.FeeEstimateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeeEstimateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeeEstimateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeEstimatePayload>
          }
          aggregate: {
            args: Prisma.FeeEstimateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeeEstimate>
          }
          groupBy: {
            args: Prisma.FeeEstimateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeeEstimateGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeEstimateCountArgs<ExtArgs>,
            result: $Utils.Optional<FeeEstimateCountAggregateOutputType> | number
          }
        }
      }
      MovingAverage: {
        payload: Prisma.$MovingAveragePayload<ExtArgs>
        fields: Prisma.MovingAverageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovingAverageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovingAverageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          findFirst: {
            args: Prisma.MovingAverageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovingAverageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          findMany: {
            args: Prisma.MovingAverageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>[]
          }
          create: {
            args: Prisma.MovingAverageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          createMany: {
            args: Prisma.MovingAverageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MovingAverageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          update: {
            args: Prisma.MovingAverageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          deleteMany: {
            args: Prisma.MovingAverageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MovingAverageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MovingAverageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MovingAveragePayload>
          }
          aggregate: {
            args: Prisma.MovingAverageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMovingAverage>
          }
          groupBy: {
            args: Prisma.MovingAverageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MovingAverageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovingAverageCountArgs<ExtArgs>,
            result: $Utils.Optional<MovingAverageCountAggregateOutputType> | number
          }
        }
      }
      FeeIndex: {
        payload: Prisma.$FeeIndexPayload<ExtArgs>
        fields: Prisma.FeeIndexFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeeIndexFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeeIndexFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          findFirst: {
            args: Prisma.FeeIndexFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeeIndexFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          findMany: {
            args: Prisma.FeeIndexFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>[]
          }
          create: {
            args: Prisma.FeeIndexCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          createMany: {
            args: Prisma.FeeIndexCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeeIndexDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          update: {
            args: Prisma.FeeIndexUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          deleteMany: {
            args: Prisma.FeeIndexDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeeIndexUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeeIndexUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeeIndexPayload>
          }
          aggregate: {
            args: Prisma.FeeIndexAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeeIndex>
          }
          groupBy: {
            args: Prisma.FeeIndexGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeeIndexGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeeIndexCountArgs<ExtArgs>,
            result: $Utils.Optional<FeeIndexCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MovingAverageCountOutputType
   */

  export type MovingAverageCountOutputType = {
    feeIndex: number
  }

  export type MovingAverageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeIndex?: boolean | MovingAverageCountOutputTypeCountFeeIndexArgs
  }

  // Custom InputTypes

  /**
   * MovingAverageCountOutputType without action
   */
  export type MovingAverageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverageCountOutputType
     */
    select?: MovingAverageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MovingAverageCountOutputType without action
   */
  export type MovingAverageCountOutputTypeCountFeeIndexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeIndexWhereInput
  }



  /**
   * Models
   */

  /**
   * Model FeeEstimate
   */

  export type AggregateFeeEstimate = {
    _count: FeeEstimateCountAggregateOutputType | null
    _avg: FeeEstimateAvgAggregateOutputType | null
    _sum: FeeEstimateSumAggregateOutputType | null
    _min: FeeEstimateMinAggregateOutputType | null
    _max: FeeEstimateMaxAggregateOutputType | null
  }

  export type FeeEstimateAvgAggregateOutputType = {
    id: number | null
    satsPerByte: Decimal | null
  }

  export type FeeEstimateSumAggregateOutputType = {
    id: number | null
    satsPerByte: Decimal | null
  }

  export type FeeEstimateMinAggregateOutputType = {
    id: number | null
    time: Date | null
    satsPerByte: Decimal | null
  }

  export type FeeEstimateMaxAggregateOutputType = {
    id: number | null
    time: Date | null
    satsPerByte: Decimal | null
  }

  export type FeeEstimateCountAggregateOutputType = {
    id: number
    time: number
    satsPerByte: number
    _all: number
  }


  export type FeeEstimateAvgAggregateInputType = {
    id?: true
    satsPerByte?: true
  }

  export type FeeEstimateSumAggregateInputType = {
    id?: true
    satsPerByte?: true
  }

  export type FeeEstimateMinAggregateInputType = {
    id?: true
    time?: true
    satsPerByte?: true
  }

  export type FeeEstimateMaxAggregateInputType = {
    id?: true
    time?: true
    satsPerByte?: true
  }

  export type FeeEstimateCountAggregateInputType = {
    id?: true
    time?: true
    satsPerByte?: true
    _all?: true
  }

  export type FeeEstimateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeEstimate to aggregate.
     */
    where?: FeeEstimateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeEstimates to fetch.
     */
    orderBy?: FeeEstimateOrderByWithRelationInput | FeeEstimateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeEstimateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeEstimates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeEstimates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeEstimates
    **/
    _count?: true | FeeEstimateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeEstimateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeEstimateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeEstimateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeEstimateMaxAggregateInputType
  }

  export type GetFeeEstimateAggregateType<T extends FeeEstimateAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeEstimate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeEstimate[P]>
      : GetScalarType<T[P], AggregateFeeEstimate[P]>
  }




  export type FeeEstimateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeEstimateWhereInput
    orderBy?: FeeEstimateOrderByWithAggregationInput | FeeEstimateOrderByWithAggregationInput[]
    by: FeeEstimateScalarFieldEnum[] | FeeEstimateScalarFieldEnum
    having?: FeeEstimateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeEstimateCountAggregateInputType | true
    _avg?: FeeEstimateAvgAggregateInputType
    _sum?: FeeEstimateSumAggregateInputType
    _min?: FeeEstimateMinAggregateInputType
    _max?: FeeEstimateMaxAggregateInputType
  }

  export type FeeEstimateGroupByOutputType = {
    id: number
    time: Date
    satsPerByte: Decimal
    _count: FeeEstimateCountAggregateOutputType | null
    _avg: FeeEstimateAvgAggregateOutputType | null
    _sum: FeeEstimateSumAggregateOutputType | null
    _min: FeeEstimateMinAggregateOutputType | null
    _max: FeeEstimateMaxAggregateOutputType | null
  }

  type GetFeeEstimateGroupByPayload<T extends FeeEstimateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeEstimateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeEstimateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeEstimateGroupByOutputType[P]>
            : GetScalarType<T[P], FeeEstimateGroupByOutputType[P]>
        }
      >
    >


  export type FeeEstimateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    time?: boolean
    satsPerByte?: boolean
    feeIndex?: boolean | FeeEstimate$feeIndexArgs<ExtArgs>
  }, ExtArgs["result"]["feeEstimate"]>

  export type FeeEstimateSelectScalar = {
    id?: boolean
    time?: boolean
    satsPerByte?: boolean
  }

  export type FeeEstimateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeIndex?: boolean | FeeEstimate$feeIndexArgs<ExtArgs>
  }


  export type $FeeEstimatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeEstimate"
    objects: {
      feeIndex: Prisma.$FeeIndexPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      time: Date
      satsPerByte: Prisma.Decimal
    }, ExtArgs["result"]["feeEstimate"]>
    composites: {}
  }


  type FeeEstimateGetPayload<S extends boolean | null | undefined | FeeEstimateDefaultArgs> = $Result.GetResult<Prisma.$FeeEstimatePayload, S>

  type FeeEstimateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeeEstimateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeeEstimateCountAggregateInputType | true
    }

  export interface FeeEstimateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeEstimate'], meta: { name: 'FeeEstimate' } }
    /**
     * Find zero or one FeeEstimate that matches the filter.
     * @param {FeeEstimateFindUniqueArgs} args - Arguments to find a FeeEstimate
     * @example
     * // Get one FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeeEstimateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateFindUniqueArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeeEstimate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeeEstimateFindUniqueOrThrowArgs} args - Arguments to find a FeeEstimate
     * @example
     * // Get one FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeeEstimateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeeEstimate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateFindFirstArgs} args - Arguments to find a FeeEstimate
     * @example
     * // Get one FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeeEstimateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateFindFirstArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeeEstimate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateFindFirstOrThrowArgs} args - Arguments to find a FeeEstimate
     * @example
     * // Get one FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeeEstimateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeeEstimates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeEstimates
     * const feeEstimates = await prisma.feeEstimate.findMany()
     * 
     * // Get first 10 FeeEstimates
     * const feeEstimates = await prisma.feeEstimate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeEstimateWithIdOnly = await prisma.feeEstimate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeeEstimateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeeEstimate.
     * @param {FeeEstimateCreateArgs} args - Arguments to create a FeeEstimate.
     * @example
     * // Create one FeeEstimate
     * const FeeEstimate = await prisma.feeEstimate.create({
     *   data: {
     *     // ... data to create a FeeEstimate
     *   }
     * })
     * 
    **/
    create<T extends FeeEstimateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateCreateArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeeEstimates.
     *     @param {FeeEstimateCreateManyArgs} args - Arguments to create many FeeEstimates.
     *     @example
     *     // Create many FeeEstimates
     *     const feeEstimate = await prisma.feeEstimate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeeEstimateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeeEstimate.
     * @param {FeeEstimateDeleteArgs} args - Arguments to delete one FeeEstimate.
     * @example
     * // Delete one FeeEstimate
     * const FeeEstimate = await prisma.feeEstimate.delete({
     *   where: {
     *     // ... filter to delete one FeeEstimate
     *   }
     * })
     * 
    **/
    delete<T extends FeeEstimateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateDeleteArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeeEstimate.
     * @param {FeeEstimateUpdateArgs} args - Arguments to update one FeeEstimate.
     * @example
     * // Update one FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeeEstimateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateUpdateArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeeEstimates.
     * @param {FeeEstimateDeleteManyArgs} args - Arguments to filter FeeEstimates to delete.
     * @example
     * // Delete a few FeeEstimates
     * const { count } = await prisma.feeEstimate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeeEstimateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeEstimateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeEstimates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeEstimates
     * const feeEstimate = await prisma.feeEstimate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeeEstimateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeeEstimate.
     * @param {FeeEstimateUpsertArgs} args - Arguments to update or create a FeeEstimate.
     * @example
     * // Update or create a FeeEstimate
     * const feeEstimate = await prisma.feeEstimate.upsert({
     *   create: {
     *     // ... data to create a FeeEstimate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeEstimate we want to update
     *   }
     * })
    **/
    upsert<T extends FeeEstimateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeeEstimateUpsertArgs<ExtArgs>>
    ): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeeEstimates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateCountArgs} args - Arguments to filter FeeEstimates to count.
     * @example
     * // Count the number of FeeEstimates
     * const count = await prisma.feeEstimate.count({
     *   where: {
     *     // ... the filter for the FeeEstimates we want to count
     *   }
     * })
    **/
    count<T extends FeeEstimateCountArgs>(
      args?: Subset<T, FeeEstimateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeEstimateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeEstimate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeEstimateAggregateArgs>(args: Subset<T, FeeEstimateAggregateArgs>): Prisma.PrismaPromise<GetFeeEstimateAggregateType<T>>

    /**
     * Group by FeeEstimate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeEstimateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeEstimateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeEstimateGroupByArgs['orderBy'] }
        : { orderBy?: FeeEstimateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeEstimateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeEstimateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeEstimate model
   */
  readonly fields: FeeEstimateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeEstimate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeEstimateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    feeIndex<T extends FeeEstimate$feeIndexArgs<ExtArgs> = {}>(args?: Subset<T, FeeEstimate$feeIndexArgs<ExtArgs>>): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeeEstimate model
   */ 
  interface FeeEstimateFieldRefs {
    readonly id: FieldRef<"FeeEstimate", 'Int'>
    readonly time: FieldRef<"FeeEstimate", 'DateTime'>
    readonly satsPerByte: FieldRef<"FeeEstimate", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * FeeEstimate findUnique
   */
  export type FeeEstimateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter, which FeeEstimate to fetch.
     */
    where: FeeEstimateWhereUniqueInput
  }


  /**
   * FeeEstimate findUniqueOrThrow
   */
  export type FeeEstimateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter, which FeeEstimate to fetch.
     */
    where: FeeEstimateWhereUniqueInput
  }


  /**
   * FeeEstimate findFirst
   */
  export type FeeEstimateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter, which FeeEstimate to fetch.
     */
    where?: FeeEstimateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeEstimates to fetch.
     */
    orderBy?: FeeEstimateOrderByWithRelationInput | FeeEstimateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeEstimates.
     */
    cursor?: FeeEstimateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeEstimates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeEstimates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeEstimates.
     */
    distinct?: FeeEstimateScalarFieldEnum | FeeEstimateScalarFieldEnum[]
  }


  /**
   * FeeEstimate findFirstOrThrow
   */
  export type FeeEstimateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter, which FeeEstimate to fetch.
     */
    where?: FeeEstimateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeEstimates to fetch.
     */
    orderBy?: FeeEstimateOrderByWithRelationInput | FeeEstimateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeEstimates.
     */
    cursor?: FeeEstimateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeEstimates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeEstimates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeEstimates.
     */
    distinct?: FeeEstimateScalarFieldEnum | FeeEstimateScalarFieldEnum[]
  }


  /**
   * FeeEstimate findMany
   */
  export type FeeEstimateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter, which FeeEstimates to fetch.
     */
    where?: FeeEstimateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeEstimates to fetch.
     */
    orderBy?: FeeEstimateOrderByWithRelationInput | FeeEstimateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeEstimates.
     */
    cursor?: FeeEstimateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeEstimates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeEstimates.
     */
    skip?: number
    distinct?: FeeEstimateScalarFieldEnum | FeeEstimateScalarFieldEnum[]
  }


  /**
   * FeeEstimate create
   */
  export type FeeEstimateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeEstimate.
     */
    data: XOR<FeeEstimateCreateInput, FeeEstimateUncheckedCreateInput>
  }


  /**
   * FeeEstimate createMany
   */
  export type FeeEstimateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeEstimates.
     */
    data: FeeEstimateCreateManyInput | FeeEstimateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeeEstimate update
   */
  export type FeeEstimateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeEstimate.
     */
    data: XOR<FeeEstimateUpdateInput, FeeEstimateUncheckedUpdateInput>
    /**
     * Choose, which FeeEstimate to update.
     */
    where: FeeEstimateWhereUniqueInput
  }


  /**
   * FeeEstimate updateMany
   */
  export type FeeEstimateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeEstimates.
     */
    data: XOR<FeeEstimateUpdateManyMutationInput, FeeEstimateUncheckedUpdateManyInput>
    /**
     * Filter which FeeEstimates to update
     */
    where?: FeeEstimateWhereInput
  }


  /**
   * FeeEstimate upsert
   */
  export type FeeEstimateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeEstimate to update in case it exists.
     */
    where: FeeEstimateWhereUniqueInput
    /**
     * In case the FeeEstimate found by the `where` argument doesn't exist, create a new FeeEstimate with this data.
     */
    create: XOR<FeeEstimateCreateInput, FeeEstimateUncheckedCreateInput>
    /**
     * In case the FeeEstimate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeEstimateUpdateInput, FeeEstimateUncheckedUpdateInput>
  }


  /**
   * FeeEstimate delete
   */
  export type FeeEstimateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
    /**
     * Filter which FeeEstimate to delete.
     */
    where: FeeEstimateWhereUniqueInput
  }


  /**
   * FeeEstimate deleteMany
   */
  export type FeeEstimateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeEstimates to delete
     */
    where?: FeeEstimateWhereInput
  }


  /**
   * FeeEstimate.feeIndex
   */
  export type FeeEstimate$feeIndexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    where?: FeeIndexWhereInput
  }


  /**
   * FeeEstimate without action
   */
  export type FeeEstimateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeEstimate
     */
    select?: FeeEstimateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeEstimateInclude<ExtArgs> | null
  }



  /**
   * Model MovingAverage
   */

  export type AggregateMovingAverage = {
    _count: MovingAverageCountAggregateOutputType | null
    _avg: MovingAverageAvgAggregateOutputType | null
    _sum: MovingAverageSumAggregateOutputType | null
    _min: MovingAverageMinAggregateOutputType | null
    _max: MovingAverageMaxAggregateOutputType | null
  }

  export type MovingAverageAvgAggregateOutputType = {
    id: number | null
    last365Days: Decimal | null
    last30Days: Decimal | null
  }

  export type MovingAverageSumAggregateOutputType = {
    id: number | null
    last365Days: Decimal | null
    last30Days: Decimal | null
  }

  export type MovingAverageMinAggregateOutputType = {
    id: number | null
    last365Days: Decimal | null
    last30Days: Decimal | null
    createdAt: Date | null
  }

  export type MovingAverageMaxAggregateOutputType = {
    id: number | null
    last365Days: Decimal | null
    last30Days: Decimal | null
    createdAt: Date | null
  }

  export type MovingAverageCountAggregateOutputType = {
    id: number
    last365Days: number
    last30Days: number
    createdAt: number
    _all: number
  }


  export type MovingAverageAvgAggregateInputType = {
    id?: true
    last365Days?: true
    last30Days?: true
  }

  export type MovingAverageSumAggregateInputType = {
    id?: true
    last365Days?: true
    last30Days?: true
  }

  export type MovingAverageMinAggregateInputType = {
    id?: true
    last365Days?: true
    last30Days?: true
    createdAt?: true
  }

  export type MovingAverageMaxAggregateInputType = {
    id?: true
    last365Days?: true
    last30Days?: true
    createdAt?: true
  }

  export type MovingAverageCountAggregateInputType = {
    id?: true
    last365Days?: true
    last30Days?: true
    createdAt?: true
    _all?: true
  }

  export type MovingAverageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovingAverage to aggregate.
     */
    where?: MovingAverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovingAverages to fetch.
     */
    orderBy?: MovingAverageOrderByWithRelationInput | MovingAverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovingAverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovingAverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovingAverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovingAverages
    **/
    _count?: true | MovingAverageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovingAverageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovingAverageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovingAverageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovingAverageMaxAggregateInputType
  }

  export type GetMovingAverageAggregateType<T extends MovingAverageAggregateArgs> = {
        [P in keyof T & keyof AggregateMovingAverage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovingAverage[P]>
      : GetScalarType<T[P], AggregateMovingAverage[P]>
  }




  export type MovingAverageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovingAverageWhereInput
    orderBy?: MovingAverageOrderByWithAggregationInput | MovingAverageOrderByWithAggregationInput[]
    by: MovingAverageScalarFieldEnum[] | MovingAverageScalarFieldEnum
    having?: MovingAverageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovingAverageCountAggregateInputType | true
    _avg?: MovingAverageAvgAggregateInputType
    _sum?: MovingAverageSumAggregateInputType
    _min?: MovingAverageMinAggregateInputType
    _max?: MovingAverageMaxAggregateInputType
  }

  export type MovingAverageGroupByOutputType = {
    id: number
    last365Days: Decimal
    last30Days: Decimal
    createdAt: Date
    _count: MovingAverageCountAggregateOutputType | null
    _avg: MovingAverageAvgAggregateOutputType | null
    _sum: MovingAverageSumAggregateOutputType | null
    _min: MovingAverageMinAggregateOutputType | null
    _max: MovingAverageMaxAggregateOutputType | null
  }

  type GetMovingAverageGroupByPayload<T extends MovingAverageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovingAverageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovingAverageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovingAverageGroupByOutputType[P]>
            : GetScalarType<T[P], MovingAverageGroupByOutputType[P]>
        }
      >
    >


  export type MovingAverageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    last365Days?: boolean
    last30Days?: boolean
    createdAt?: boolean
    feeIndex?: boolean | MovingAverage$feeIndexArgs<ExtArgs>
    _count?: boolean | MovingAverageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movingAverage"]>

  export type MovingAverageSelectScalar = {
    id?: boolean
    last365Days?: boolean
    last30Days?: boolean
    createdAt?: boolean
  }

  export type MovingAverageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeIndex?: boolean | MovingAverage$feeIndexArgs<ExtArgs>
    _count?: boolean | MovingAverageCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MovingAveragePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovingAverage"
    objects: {
      feeIndex: Prisma.$FeeIndexPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      last365Days: Prisma.Decimal
      last30Days: Prisma.Decimal
      createdAt: Date
    }, ExtArgs["result"]["movingAverage"]>
    composites: {}
  }


  type MovingAverageGetPayload<S extends boolean | null | undefined | MovingAverageDefaultArgs> = $Result.GetResult<Prisma.$MovingAveragePayload, S>

  type MovingAverageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovingAverageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovingAverageCountAggregateInputType | true
    }

  export interface MovingAverageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovingAverage'], meta: { name: 'MovingAverage' } }
    /**
     * Find zero or one MovingAverage that matches the filter.
     * @param {MovingAverageFindUniqueArgs} args - Arguments to find a MovingAverage
     * @example
     * // Get one MovingAverage
     * const movingAverage = await prisma.movingAverage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MovingAverageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageFindUniqueArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MovingAverage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MovingAverageFindUniqueOrThrowArgs} args - Arguments to find a MovingAverage
     * @example
     * // Get one MovingAverage
     * const movingAverage = await prisma.movingAverage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MovingAverageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MovingAverage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageFindFirstArgs} args - Arguments to find a MovingAverage
     * @example
     * // Get one MovingAverage
     * const movingAverage = await prisma.movingAverage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MovingAverageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageFindFirstArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MovingAverage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageFindFirstOrThrowArgs} args - Arguments to find a MovingAverage
     * @example
     * // Get one MovingAverage
     * const movingAverage = await prisma.movingAverage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MovingAverageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MovingAverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovingAverages
     * const movingAverages = await prisma.movingAverage.findMany()
     * 
     * // Get first 10 MovingAverages
     * const movingAverages = await prisma.movingAverage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movingAverageWithIdOnly = await prisma.movingAverage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MovingAverageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MovingAverage.
     * @param {MovingAverageCreateArgs} args - Arguments to create a MovingAverage.
     * @example
     * // Create one MovingAverage
     * const MovingAverage = await prisma.movingAverage.create({
     *   data: {
     *     // ... data to create a MovingAverage
     *   }
     * })
     * 
    **/
    create<T extends MovingAverageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageCreateArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MovingAverages.
     *     @param {MovingAverageCreateManyArgs} args - Arguments to create many MovingAverages.
     *     @example
     *     // Create many MovingAverages
     *     const movingAverage = await prisma.movingAverage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MovingAverageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MovingAverage.
     * @param {MovingAverageDeleteArgs} args - Arguments to delete one MovingAverage.
     * @example
     * // Delete one MovingAverage
     * const MovingAverage = await prisma.movingAverage.delete({
     *   where: {
     *     // ... filter to delete one MovingAverage
     *   }
     * })
     * 
    **/
    delete<T extends MovingAverageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageDeleteArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MovingAverage.
     * @param {MovingAverageUpdateArgs} args - Arguments to update one MovingAverage.
     * @example
     * // Update one MovingAverage
     * const movingAverage = await prisma.movingAverage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MovingAverageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageUpdateArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MovingAverages.
     * @param {MovingAverageDeleteManyArgs} args - Arguments to filter MovingAverages to delete.
     * @example
     * // Delete a few MovingAverages
     * const { count } = await prisma.movingAverage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MovingAverageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MovingAverageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovingAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovingAverages
     * const movingAverage = await prisma.movingAverage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MovingAverageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovingAverage.
     * @param {MovingAverageUpsertArgs} args - Arguments to update or create a MovingAverage.
     * @example
     * // Update or create a MovingAverage
     * const movingAverage = await prisma.movingAverage.upsert({
     *   create: {
     *     // ... data to create a MovingAverage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovingAverage we want to update
     *   }
     * })
    **/
    upsert<T extends MovingAverageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MovingAverageUpsertArgs<ExtArgs>>
    ): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MovingAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageCountArgs} args - Arguments to filter MovingAverages to count.
     * @example
     * // Count the number of MovingAverages
     * const count = await prisma.movingAverage.count({
     *   where: {
     *     // ... the filter for the MovingAverages we want to count
     *   }
     * })
    **/
    count<T extends MovingAverageCountArgs>(
      args?: Subset<T, MovingAverageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovingAverageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovingAverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovingAverageAggregateArgs>(args: Subset<T, MovingAverageAggregateArgs>): Prisma.PrismaPromise<GetMovingAverageAggregateType<T>>

    /**
     * Group by MovingAverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovingAverageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovingAverageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovingAverageGroupByArgs['orderBy'] }
        : { orderBy?: MovingAverageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovingAverageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovingAverageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovingAverage model
   */
  readonly fields: MovingAverageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovingAverage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovingAverageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    feeIndex<T extends MovingAverage$feeIndexArgs<ExtArgs> = {}>(args?: Subset<T, MovingAverage$feeIndexArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MovingAverage model
   */ 
  interface MovingAverageFieldRefs {
    readonly id: FieldRef<"MovingAverage", 'Int'>
    readonly last365Days: FieldRef<"MovingAverage", 'Decimal'>
    readonly last30Days: FieldRef<"MovingAverage", 'Decimal'>
    readonly createdAt: FieldRef<"MovingAverage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MovingAverage findUnique
   */
  export type MovingAverageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter, which MovingAverage to fetch.
     */
    where: MovingAverageWhereUniqueInput
  }


  /**
   * MovingAverage findUniqueOrThrow
   */
  export type MovingAverageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter, which MovingAverage to fetch.
     */
    where: MovingAverageWhereUniqueInput
  }


  /**
   * MovingAverage findFirst
   */
  export type MovingAverageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter, which MovingAverage to fetch.
     */
    where?: MovingAverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovingAverages to fetch.
     */
    orderBy?: MovingAverageOrderByWithRelationInput | MovingAverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovingAverages.
     */
    cursor?: MovingAverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovingAverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovingAverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovingAverages.
     */
    distinct?: MovingAverageScalarFieldEnum | MovingAverageScalarFieldEnum[]
  }


  /**
   * MovingAverage findFirstOrThrow
   */
  export type MovingAverageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter, which MovingAverage to fetch.
     */
    where?: MovingAverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovingAverages to fetch.
     */
    orderBy?: MovingAverageOrderByWithRelationInput | MovingAverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovingAverages.
     */
    cursor?: MovingAverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovingAverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovingAverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovingAverages.
     */
    distinct?: MovingAverageScalarFieldEnum | MovingAverageScalarFieldEnum[]
  }


  /**
   * MovingAverage findMany
   */
  export type MovingAverageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter, which MovingAverages to fetch.
     */
    where?: MovingAverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovingAverages to fetch.
     */
    orderBy?: MovingAverageOrderByWithRelationInput | MovingAverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovingAverages.
     */
    cursor?: MovingAverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovingAverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovingAverages.
     */
    skip?: number
    distinct?: MovingAverageScalarFieldEnum | MovingAverageScalarFieldEnum[]
  }


  /**
   * MovingAverage create
   */
  export type MovingAverageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * The data needed to create a MovingAverage.
     */
    data: XOR<MovingAverageCreateInput, MovingAverageUncheckedCreateInput>
  }


  /**
   * MovingAverage createMany
   */
  export type MovingAverageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovingAverages.
     */
    data: MovingAverageCreateManyInput | MovingAverageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MovingAverage update
   */
  export type MovingAverageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * The data needed to update a MovingAverage.
     */
    data: XOR<MovingAverageUpdateInput, MovingAverageUncheckedUpdateInput>
    /**
     * Choose, which MovingAverage to update.
     */
    where: MovingAverageWhereUniqueInput
  }


  /**
   * MovingAverage updateMany
   */
  export type MovingAverageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovingAverages.
     */
    data: XOR<MovingAverageUpdateManyMutationInput, MovingAverageUncheckedUpdateManyInput>
    /**
     * Filter which MovingAverages to update
     */
    where?: MovingAverageWhereInput
  }


  /**
   * MovingAverage upsert
   */
  export type MovingAverageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * The filter to search for the MovingAverage to update in case it exists.
     */
    where: MovingAverageWhereUniqueInput
    /**
     * In case the MovingAverage found by the `where` argument doesn't exist, create a new MovingAverage with this data.
     */
    create: XOR<MovingAverageCreateInput, MovingAverageUncheckedCreateInput>
    /**
     * In case the MovingAverage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovingAverageUpdateInput, MovingAverageUncheckedUpdateInput>
  }


  /**
   * MovingAverage delete
   */
  export type MovingAverageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
    /**
     * Filter which MovingAverage to delete.
     */
    where: MovingAverageWhereUniqueInput
  }


  /**
   * MovingAverage deleteMany
   */
  export type MovingAverageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovingAverages to delete
     */
    where?: MovingAverageWhereInput
  }


  /**
   * MovingAverage.feeIndex
   */
  export type MovingAverage$feeIndexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    where?: FeeIndexWhereInput
    orderBy?: FeeIndexOrderByWithRelationInput | FeeIndexOrderByWithRelationInput[]
    cursor?: FeeIndexWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeeIndexScalarFieldEnum | FeeIndexScalarFieldEnum[]
  }


  /**
   * MovingAverage without action
   */
  export type MovingAverageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovingAverage
     */
    select?: MovingAverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MovingAverageInclude<ExtArgs> | null
  }



  /**
   * Model FeeIndex
   */

  export type AggregateFeeIndex = {
    _count: FeeIndexCountAggregateOutputType | null
    _avg: FeeIndexAvgAggregateOutputType | null
    _sum: FeeIndexSumAggregateOutputType | null
    _min: FeeIndexMinAggregateOutputType | null
    _max: FeeIndexMaxAggregateOutputType | null
  }

  export type FeeIndexAvgAggregateOutputType = {
    id: number | null
    feeEstimateId: number | null
    movingAverageId: number | null
    ratioLast365Days: Decimal | null
    ratioLast30Days: Decimal | null
  }

  export type FeeIndexSumAggregateOutputType = {
    id: number | null
    feeEstimateId: number | null
    movingAverageId: number | null
    ratioLast365Days: Decimal | null
    ratioLast30Days: Decimal | null
  }

  export type FeeIndexMinAggregateOutputType = {
    id: number | null
    feeEstimateId: number | null
    movingAverageId: number | null
    ratioLast365Days: Decimal | null
    ratioLast30Days: Decimal | null
    createdAt: Date | null
  }

  export type FeeIndexMaxAggregateOutputType = {
    id: number | null
    feeEstimateId: number | null
    movingAverageId: number | null
    ratioLast365Days: Decimal | null
    ratioLast30Days: Decimal | null
    createdAt: Date | null
  }

  export type FeeIndexCountAggregateOutputType = {
    id: number
    feeEstimateId: number
    movingAverageId: number
    ratioLast365Days: number
    ratioLast30Days: number
    createdAt: number
    _all: number
  }


  export type FeeIndexAvgAggregateInputType = {
    id?: true
    feeEstimateId?: true
    movingAverageId?: true
    ratioLast365Days?: true
    ratioLast30Days?: true
  }

  export type FeeIndexSumAggregateInputType = {
    id?: true
    feeEstimateId?: true
    movingAverageId?: true
    ratioLast365Days?: true
    ratioLast30Days?: true
  }

  export type FeeIndexMinAggregateInputType = {
    id?: true
    feeEstimateId?: true
    movingAverageId?: true
    ratioLast365Days?: true
    ratioLast30Days?: true
    createdAt?: true
  }

  export type FeeIndexMaxAggregateInputType = {
    id?: true
    feeEstimateId?: true
    movingAverageId?: true
    ratioLast365Days?: true
    ratioLast30Days?: true
    createdAt?: true
  }

  export type FeeIndexCountAggregateInputType = {
    id?: true
    feeEstimateId?: true
    movingAverageId?: true
    ratioLast365Days?: true
    ratioLast30Days?: true
    createdAt?: true
    _all?: true
  }

  export type FeeIndexAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeIndex to aggregate.
     */
    where?: FeeIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeIndices to fetch.
     */
    orderBy?: FeeIndexOrderByWithRelationInput | FeeIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeeIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeeIndices
    **/
    _count?: true | FeeIndexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeeIndexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeeIndexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeeIndexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeeIndexMaxAggregateInputType
  }

  export type GetFeeIndexAggregateType<T extends FeeIndexAggregateArgs> = {
        [P in keyof T & keyof AggregateFeeIndex]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeeIndex[P]>
      : GetScalarType<T[P], AggregateFeeIndex[P]>
  }




  export type FeeIndexGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeeIndexWhereInput
    orderBy?: FeeIndexOrderByWithAggregationInput | FeeIndexOrderByWithAggregationInput[]
    by: FeeIndexScalarFieldEnum[] | FeeIndexScalarFieldEnum
    having?: FeeIndexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeeIndexCountAggregateInputType | true
    _avg?: FeeIndexAvgAggregateInputType
    _sum?: FeeIndexSumAggregateInputType
    _min?: FeeIndexMinAggregateInputType
    _max?: FeeIndexMaxAggregateInputType
  }

  export type FeeIndexGroupByOutputType = {
    id: number
    feeEstimateId: number
    movingAverageId: number
    ratioLast365Days: Decimal
    ratioLast30Days: Decimal
    createdAt: Date
    _count: FeeIndexCountAggregateOutputType | null
    _avg: FeeIndexAvgAggregateOutputType | null
    _sum: FeeIndexSumAggregateOutputType | null
    _min: FeeIndexMinAggregateOutputType | null
    _max: FeeIndexMaxAggregateOutputType | null
  }

  type GetFeeIndexGroupByPayload<T extends FeeIndexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeeIndexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeeIndexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeeIndexGroupByOutputType[P]>
            : GetScalarType<T[P], FeeIndexGroupByOutputType[P]>
        }
      >
    >


  export type FeeIndexSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feeEstimateId?: boolean
    movingAverageId?: boolean
    ratioLast365Days?: boolean
    ratioLast30Days?: boolean
    createdAt?: boolean
    feeEstimate?: boolean | FeeEstimateDefaultArgs<ExtArgs>
    movingAverage?: boolean | MovingAverageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feeIndex"]>

  export type FeeIndexSelectScalar = {
    id?: boolean
    feeEstimateId?: boolean
    movingAverageId?: boolean
    ratioLast365Days?: boolean
    ratioLast30Days?: boolean
    createdAt?: boolean
  }

  export type FeeIndexInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feeEstimate?: boolean | FeeEstimateDefaultArgs<ExtArgs>
    movingAverage?: boolean | MovingAverageDefaultArgs<ExtArgs>
  }


  export type $FeeIndexPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeeIndex"
    objects: {
      feeEstimate: Prisma.$FeeEstimatePayload<ExtArgs>
      movingAverage: Prisma.$MovingAveragePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      feeEstimateId: number
      movingAverageId: number
      ratioLast365Days: Prisma.Decimal
      ratioLast30Days: Prisma.Decimal
      createdAt: Date
    }, ExtArgs["result"]["feeIndex"]>
    composites: {}
  }


  type FeeIndexGetPayload<S extends boolean | null | undefined | FeeIndexDefaultArgs> = $Result.GetResult<Prisma.$FeeIndexPayload, S>

  type FeeIndexCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeeIndexFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeeIndexCountAggregateInputType | true
    }

  export interface FeeIndexDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeeIndex'], meta: { name: 'FeeIndex' } }
    /**
     * Find zero or one FeeIndex that matches the filter.
     * @param {FeeIndexFindUniqueArgs} args - Arguments to find a FeeIndex
     * @example
     * // Get one FeeIndex
     * const feeIndex = await prisma.feeIndex.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeeIndexFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexFindUniqueArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeeIndex that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeeIndexFindUniqueOrThrowArgs} args - Arguments to find a FeeIndex
     * @example
     * // Get one FeeIndex
     * const feeIndex = await prisma.feeIndex.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeeIndexFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeeIndex that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexFindFirstArgs} args - Arguments to find a FeeIndex
     * @example
     * // Get one FeeIndex
     * const feeIndex = await prisma.feeIndex.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeeIndexFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexFindFirstArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeeIndex that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexFindFirstOrThrowArgs} args - Arguments to find a FeeIndex
     * @example
     * // Get one FeeIndex
     * const feeIndex = await prisma.feeIndex.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeeIndexFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeeIndices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeeIndices
     * const feeIndices = await prisma.feeIndex.findMany()
     * 
     * // Get first 10 FeeIndices
     * const feeIndices = await prisma.feeIndex.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feeIndexWithIdOnly = await prisma.feeIndex.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeeIndexFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeeIndex.
     * @param {FeeIndexCreateArgs} args - Arguments to create a FeeIndex.
     * @example
     * // Create one FeeIndex
     * const FeeIndex = await prisma.feeIndex.create({
     *   data: {
     *     // ... data to create a FeeIndex
     *   }
     * })
     * 
    **/
    create<T extends FeeIndexCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexCreateArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeeIndices.
     *     @param {FeeIndexCreateManyArgs} args - Arguments to create many FeeIndices.
     *     @example
     *     // Create many FeeIndices
     *     const feeIndex = await prisma.feeIndex.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeeIndexCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeeIndex.
     * @param {FeeIndexDeleteArgs} args - Arguments to delete one FeeIndex.
     * @example
     * // Delete one FeeIndex
     * const FeeIndex = await prisma.feeIndex.delete({
     *   where: {
     *     // ... filter to delete one FeeIndex
     *   }
     * })
     * 
    **/
    delete<T extends FeeIndexDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexDeleteArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeeIndex.
     * @param {FeeIndexUpdateArgs} args - Arguments to update one FeeIndex.
     * @example
     * // Update one FeeIndex
     * const feeIndex = await prisma.feeIndex.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeeIndexUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexUpdateArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeeIndices.
     * @param {FeeIndexDeleteManyArgs} args - Arguments to filter FeeIndices to delete.
     * @example
     * // Delete a few FeeIndices
     * const { count } = await prisma.feeIndex.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeeIndexDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeeIndexDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeeIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeeIndices
     * const feeIndex = await prisma.feeIndex.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeeIndexUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeeIndex.
     * @param {FeeIndexUpsertArgs} args - Arguments to update or create a FeeIndex.
     * @example
     * // Update or create a FeeIndex
     * const feeIndex = await prisma.feeIndex.upsert({
     *   create: {
     *     // ... data to create a FeeIndex
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeeIndex we want to update
     *   }
     * })
    **/
    upsert<T extends FeeIndexUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeeIndexUpsertArgs<ExtArgs>>
    ): Prisma__FeeIndexClient<$Result.GetResult<Prisma.$FeeIndexPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeeIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexCountArgs} args - Arguments to filter FeeIndices to count.
     * @example
     * // Count the number of FeeIndices
     * const count = await prisma.feeIndex.count({
     *   where: {
     *     // ... the filter for the FeeIndices we want to count
     *   }
     * })
    **/
    count<T extends FeeIndexCountArgs>(
      args?: Subset<T, FeeIndexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeeIndexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeeIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeeIndexAggregateArgs>(args: Subset<T, FeeIndexAggregateArgs>): Prisma.PrismaPromise<GetFeeIndexAggregateType<T>>

    /**
     * Group by FeeIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeeIndexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeeIndexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeeIndexGroupByArgs['orderBy'] }
        : { orderBy?: FeeIndexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeeIndexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeeIndexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeeIndex model
   */
  readonly fields: FeeIndexFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeeIndex.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeeIndexClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    feeEstimate<T extends FeeEstimateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeeEstimateDefaultArgs<ExtArgs>>): Prisma__FeeEstimateClient<$Result.GetResult<Prisma.$FeeEstimatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    movingAverage<T extends MovingAverageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MovingAverageDefaultArgs<ExtArgs>>): Prisma__MovingAverageClient<$Result.GetResult<Prisma.$MovingAveragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeeIndex model
   */ 
  interface FeeIndexFieldRefs {
    readonly id: FieldRef<"FeeIndex", 'Int'>
    readonly feeEstimateId: FieldRef<"FeeIndex", 'Int'>
    readonly movingAverageId: FieldRef<"FeeIndex", 'Int'>
    readonly ratioLast365Days: FieldRef<"FeeIndex", 'Decimal'>
    readonly ratioLast30Days: FieldRef<"FeeIndex", 'Decimal'>
    readonly createdAt: FieldRef<"FeeIndex", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FeeIndex findUnique
   */
  export type FeeIndexFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter, which FeeIndex to fetch.
     */
    where: FeeIndexWhereUniqueInput
  }


  /**
   * FeeIndex findUniqueOrThrow
   */
  export type FeeIndexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter, which FeeIndex to fetch.
     */
    where: FeeIndexWhereUniqueInput
  }


  /**
   * FeeIndex findFirst
   */
  export type FeeIndexFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter, which FeeIndex to fetch.
     */
    where?: FeeIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeIndices to fetch.
     */
    orderBy?: FeeIndexOrderByWithRelationInput | FeeIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeIndices.
     */
    cursor?: FeeIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeIndices.
     */
    distinct?: FeeIndexScalarFieldEnum | FeeIndexScalarFieldEnum[]
  }


  /**
   * FeeIndex findFirstOrThrow
   */
  export type FeeIndexFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter, which FeeIndex to fetch.
     */
    where?: FeeIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeIndices to fetch.
     */
    orderBy?: FeeIndexOrderByWithRelationInput | FeeIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeeIndices.
     */
    cursor?: FeeIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeeIndices.
     */
    distinct?: FeeIndexScalarFieldEnum | FeeIndexScalarFieldEnum[]
  }


  /**
   * FeeIndex findMany
   */
  export type FeeIndexFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter, which FeeIndices to fetch.
     */
    where?: FeeIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeeIndices to fetch.
     */
    orderBy?: FeeIndexOrderByWithRelationInput | FeeIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeeIndices.
     */
    cursor?: FeeIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeeIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeeIndices.
     */
    skip?: number
    distinct?: FeeIndexScalarFieldEnum | FeeIndexScalarFieldEnum[]
  }


  /**
   * FeeIndex create
   */
  export type FeeIndexCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * The data needed to create a FeeIndex.
     */
    data: XOR<FeeIndexCreateInput, FeeIndexUncheckedCreateInput>
  }


  /**
   * FeeIndex createMany
   */
  export type FeeIndexCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeeIndices.
     */
    data: FeeIndexCreateManyInput | FeeIndexCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeeIndex update
   */
  export type FeeIndexUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * The data needed to update a FeeIndex.
     */
    data: XOR<FeeIndexUpdateInput, FeeIndexUncheckedUpdateInput>
    /**
     * Choose, which FeeIndex to update.
     */
    where: FeeIndexWhereUniqueInput
  }


  /**
   * FeeIndex updateMany
   */
  export type FeeIndexUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeeIndices.
     */
    data: XOR<FeeIndexUpdateManyMutationInput, FeeIndexUncheckedUpdateManyInput>
    /**
     * Filter which FeeIndices to update
     */
    where?: FeeIndexWhereInput
  }


  /**
   * FeeIndex upsert
   */
  export type FeeIndexUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * The filter to search for the FeeIndex to update in case it exists.
     */
    where: FeeIndexWhereUniqueInput
    /**
     * In case the FeeIndex found by the `where` argument doesn't exist, create a new FeeIndex with this data.
     */
    create: XOR<FeeIndexCreateInput, FeeIndexUncheckedCreateInput>
    /**
     * In case the FeeIndex was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeeIndexUpdateInput, FeeIndexUncheckedUpdateInput>
  }


  /**
   * FeeIndex delete
   */
  export type FeeIndexDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
    /**
     * Filter which FeeIndex to delete.
     */
    where: FeeIndexWhereUniqueInput
  }


  /**
   * FeeIndex deleteMany
   */
  export type FeeIndexDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeeIndices to delete
     */
    where?: FeeIndexWhereInput
  }


  /**
   * FeeIndex without action
   */
  export type FeeIndexDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeeIndex
     */
    select?: FeeIndexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeeIndexInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FeeEstimateScalarFieldEnum: {
    id: 'id',
    time: 'time',
    satsPerByte: 'satsPerByte'
  };

  export type FeeEstimateScalarFieldEnum = (typeof FeeEstimateScalarFieldEnum)[keyof typeof FeeEstimateScalarFieldEnum]


  export const MovingAverageScalarFieldEnum: {
    id: 'id',
    last365Days: 'last365Days',
    last30Days: 'last30Days',
    createdAt: 'createdAt'
  };

  export type MovingAverageScalarFieldEnum = (typeof MovingAverageScalarFieldEnum)[keyof typeof MovingAverageScalarFieldEnum]


  export const FeeIndexScalarFieldEnum: {
    id: 'id',
    feeEstimateId: 'feeEstimateId',
    movingAverageId: 'movingAverageId',
    ratioLast365Days: 'ratioLast365Days',
    ratioLast30Days: 'ratioLast30Days',
    createdAt: 'createdAt'
  };

  export type FeeIndexScalarFieldEnum = (typeof FeeIndexScalarFieldEnum)[keyof typeof FeeIndexScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type FeeEstimateWhereInput = {
    AND?: FeeEstimateWhereInput | FeeEstimateWhereInput[]
    OR?: FeeEstimateWhereInput[]
    NOT?: FeeEstimateWhereInput | FeeEstimateWhereInput[]
    id?: IntFilter<"FeeEstimate"> | number
    time?: DateTimeFilter<"FeeEstimate"> | Date | string
    satsPerByte?: DecimalFilter<"FeeEstimate"> | Decimal | DecimalJsLike | number | string
    feeIndex?: XOR<FeeIndexNullableRelationFilter, FeeIndexWhereInput> | null
  }

  export type FeeEstimateOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
    satsPerByte?: SortOrder
    feeIndex?: FeeIndexOrderByWithRelationInput
  }

  export type FeeEstimateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeeEstimateWhereInput | FeeEstimateWhereInput[]
    OR?: FeeEstimateWhereInput[]
    NOT?: FeeEstimateWhereInput | FeeEstimateWhereInput[]
    time?: DateTimeFilter<"FeeEstimate"> | Date | string
    satsPerByte?: DecimalFilter<"FeeEstimate"> | Decimal | DecimalJsLike | number | string
    feeIndex?: XOR<FeeIndexNullableRelationFilter, FeeIndexWhereInput> | null
  }, "id">

  export type FeeEstimateOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    satsPerByte?: SortOrder
    _count?: FeeEstimateCountOrderByAggregateInput
    _avg?: FeeEstimateAvgOrderByAggregateInput
    _max?: FeeEstimateMaxOrderByAggregateInput
    _min?: FeeEstimateMinOrderByAggregateInput
    _sum?: FeeEstimateSumOrderByAggregateInput
  }

  export type FeeEstimateScalarWhereWithAggregatesInput = {
    AND?: FeeEstimateScalarWhereWithAggregatesInput | FeeEstimateScalarWhereWithAggregatesInput[]
    OR?: FeeEstimateScalarWhereWithAggregatesInput[]
    NOT?: FeeEstimateScalarWhereWithAggregatesInput | FeeEstimateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeEstimate"> | number
    time?: DateTimeWithAggregatesFilter<"FeeEstimate"> | Date | string
    satsPerByte?: DecimalWithAggregatesFilter<"FeeEstimate"> | Decimal | DecimalJsLike | number | string
  }

  export type MovingAverageWhereInput = {
    AND?: MovingAverageWhereInput | MovingAverageWhereInput[]
    OR?: MovingAverageWhereInput[]
    NOT?: MovingAverageWhereInput | MovingAverageWhereInput[]
    id?: IntFilter<"MovingAverage"> | number
    last365Days?: DecimalFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"MovingAverage"> | Date | string
    feeIndex?: FeeIndexListRelationFilter
  }

  export type MovingAverageOrderByWithRelationInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
    createdAt?: SortOrder
    feeIndex?: FeeIndexOrderByRelationAggregateInput
  }

  export type MovingAverageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MovingAverageWhereInput | MovingAverageWhereInput[]
    OR?: MovingAverageWhereInput[]
    NOT?: MovingAverageWhereInput | MovingAverageWhereInput[]
    last365Days?: DecimalFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"MovingAverage"> | Date | string
    feeIndex?: FeeIndexListRelationFilter
  }, "id">

  export type MovingAverageOrderByWithAggregationInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
    createdAt?: SortOrder
    _count?: MovingAverageCountOrderByAggregateInput
    _avg?: MovingAverageAvgOrderByAggregateInput
    _max?: MovingAverageMaxOrderByAggregateInput
    _min?: MovingAverageMinOrderByAggregateInput
    _sum?: MovingAverageSumOrderByAggregateInput
  }

  export type MovingAverageScalarWhereWithAggregatesInput = {
    AND?: MovingAverageScalarWhereWithAggregatesInput | MovingAverageScalarWhereWithAggregatesInput[]
    OR?: MovingAverageScalarWhereWithAggregatesInput[]
    NOT?: MovingAverageScalarWhereWithAggregatesInput | MovingAverageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MovingAverage"> | number
    last365Days?: DecimalWithAggregatesFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalWithAggregatesFilter<"MovingAverage"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"MovingAverage"> | Date | string
  }

  export type FeeIndexWhereInput = {
    AND?: FeeIndexWhereInput | FeeIndexWhereInput[]
    OR?: FeeIndexWhereInput[]
    NOT?: FeeIndexWhereInput | FeeIndexWhereInput[]
    id?: IntFilter<"FeeIndex"> | number
    feeEstimateId?: IntFilter<"FeeIndex"> | number
    movingAverageId?: IntFilter<"FeeIndex"> | number
    ratioLast365Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"FeeIndex"> | Date | string
    feeEstimate?: XOR<FeeEstimateRelationFilter, FeeEstimateWhereInput>
    movingAverage?: XOR<MovingAverageRelationFilter, MovingAverageWhereInput>
  }

  export type FeeIndexOrderByWithRelationInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
    createdAt?: SortOrder
    feeEstimate?: FeeEstimateOrderByWithRelationInput
    movingAverage?: MovingAverageOrderByWithRelationInput
  }

  export type FeeIndexWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    feeEstimateId?: number
    AND?: FeeIndexWhereInput | FeeIndexWhereInput[]
    OR?: FeeIndexWhereInput[]
    NOT?: FeeIndexWhereInput | FeeIndexWhereInput[]
    movingAverageId?: IntFilter<"FeeIndex"> | number
    ratioLast365Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"FeeIndex"> | Date | string
    feeEstimate?: XOR<FeeEstimateRelationFilter, FeeEstimateWhereInput>
    movingAverage?: XOR<MovingAverageRelationFilter, MovingAverageWhereInput>
  }, "id" | "feeEstimateId">

  export type FeeIndexOrderByWithAggregationInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
    createdAt?: SortOrder
    _count?: FeeIndexCountOrderByAggregateInput
    _avg?: FeeIndexAvgOrderByAggregateInput
    _max?: FeeIndexMaxOrderByAggregateInput
    _min?: FeeIndexMinOrderByAggregateInput
    _sum?: FeeIndexSumOrderByAggregateInput
  }

  export type FeeIndexScalarWhereWithAggregatesInput = {
    AND?: FeeIndexScalarWhereWithAggregatesInput | FeeIndexScalarWhereWithAggregatesInput[]
    OR?: FeeIndexScalarWhereWithAggregatesInput[]
    NOT?: FeeIndexScalarWhereWithAggregatesInput | FeeIndexScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeeIndex"> | number
    feeEstimateId?: IntWithAggregatesFilter<"FeeIndex"> | number
    movingAverageId?: IntWithAggregatesFilter<"FeeIndex"> | number
    ratioLast365Days?: DecimalWithAggregatesFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalWithAggregatesFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"FeeIndex"> | Date | string
  }

  export type FeeEstimateCreateInput = {
    time: Date | string
    satsPerByte: Decimal | DecimalJsLike | number | string
    feeIndex?: FeeIndexCreateNestedOneWithoutFeeEstimateInput
  }

  export type FeeEstimateUncheckedCreateInput = {
    id?: number
    time: Date | string
    satsPerByte: Decimal | DecimalJsLike | number | string
    feeIndex?: FeeIndexUncheckedCreateNestedOneWithoutFeeEstimateInput
  }

  export type FeeEstimateUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeIndex?: FeeIndexUpdateOneWithoutFeeEstimateNestedInput
  }

  export type FeeEstimateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeIndex?: FeeIndexUncheckedUpdateOneWithoutFeeEstimateNestedInput
  }

  export type FeeEstimateCreateManyInput = {
    id?: number
    time: Date | string
    satsPerByte: Decimal | DecimalJsLike | number | string
  }

  export type FeeEstimateUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FeeEstimateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MovingAverageCreateInput = {
    last365Days: Decimal | DecimalJsLike | number | string
    last30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    feeIndex?: FeeIndexCreateNestedManyWithoutMovingAverageInput
  }

  export type MovingAverageUncheckedCreateInput = {
    id?: number
    last365Days: Decimal | DecimalJsLike | number | string
    last30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    feeIndex?: FeeIndexUncheckedCreateNestedManyWithoutMovingAverageInput
  }

  export type MovingAverageUpdateInput = {
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeIndex?: FeeIndexUpdateManyWithoutMovingAverageNestedInput
  }

  export type MovingAverageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeIndex?: FeeIndexUncheckedUpdateManyWithoutMovingAverageNestedInput
  }

  export type MovingAverageCreateManyInput = {
    id?: number
    last365Days: Decimal | DecimalJsLike | number | string
    last30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type MovingAverageUpdateManyMutationInput = {
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovingAverageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexCreateInput = {
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    feeEstimate: FeeEstimateCreateNestedOneWithoutFeeIndexInput
    movingAverage: MovingAverageCreateNestedOneWithoutFeeIndexInput
  }

  export type FeeIndexUncheckedCreateInput = {
    id?: number
    feeEstimateId: number
    movingAverageId: number
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type FeeIndexUpdateInput = {
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeEstimate?: FeeEstimateUpdateOneRequiredWithoutFeeIndexNestedInput
    movingAverage?: MovingAverageUpdateOneRequiredWithoutFeeIndexNestedInput
  }

  export type FeeIndexUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeEstimateId?: IntFieldUpdateOperationsInput | number
    movingAverageId?: IntFieldUpdateOperationsInput | number
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexCreateManyInput = {
    id?: number
    feeEstimateId: number
    movingAverageId: number
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type FeeIndexUpdateManyMutationInput = {
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeEstimateId?: IntFieldUpdateOperationsInput | number
    movingAverageId?: IntFieldUpdateOperationsInput | number
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type FeeIndexNullableRelationFilter = {
    is?: FeeIndexWhereInput | null
    isNot?: FeeIndexWhereInput | null
  }

  export type FeeEstimateCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    satsPerByte?: SortOrder
  }

  export type FeeEstimateAvgOrderByAggregateInput = {
    id?: SortOrder
    satsPerByte?: SortOrder
  }

  export type FeeEstimateMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    satsPerByte?: SortOrder
  }

  export type FeeEstimateMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    satsPerByte?: SortOrder
  }

  export type FeeEstimateSumOrderByAggregateInput = {
    id?: SortOrder
    satsPerByte?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type FeeIndexListRelationFilter = {
    every?: FeeIndexWhereInput
    some?: FeeIndexWhereInput
    none?: FeeIndexWhereInput
  }

  export type FeeIndexOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MovingAverageCountOrderByAggregateInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type MovingAverageAvgOrderByAggregateInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
  }

  export type MovingAverageMaxOrderByAggregateInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type MovingAverageMinOrderByAggregateInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type MovingAverageSumOrderByAggregateInput = {
    id?: SortOrder
    last365Days?: SortOrder
    last30Days?: SortOrder
  }

  export type FeeEstimateRelationFilter = {
    is?: FeeEstimateWhereInput
    isNot?: FeeEstimateWhereInput
  }

  export type MovingAverageRelationFilter = {
    is?: MovingAverageWhereInput
    isNot?: MovingAverageWhereInput
  }

  export type FeeIndexCountOrderByAggregateInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type FeeIndexAvgOrderByAggregateInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
  }

  export type FeeIndexMaxOrderByAggregateInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type FeeIndexMinOrderByAggregateInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
    createdAt?: SortOrder
  }

  export type FeeIndexSumOrderByAggregateInput = {
    id?: SortOrder
    feeEstimateId?: SortOrder
    movingAverageId?: SortOrder
    ratioLast365Days?: SortOrder
    ratioLast30Days?: SortOrder
  }

  export type FeeIndexCreateNestedOneWithoutFeeEstimateInput = {
    create?: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
    connectOrCreate?: FeeIndexCreateOrConnectWithoutFeeEstimateInput
    connect?: FeeIndexWhereUniqueInput
  }

  export type FeeIndexUncheckedCreateNestedOneWithoutFeeEstimateInput = {
    create?: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
    connectOrCreate?: FeeIndexCreateOrConnectWithoutFeeEstimateInput
    connect?: FeeIndexWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FeeIndexUpdateOneWithoutFeeEstimateNestedInput = {
    create?: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
    connectOrCreate?: FeeIndexCreateOrConnectWithoutFeeEstimateInput
    upsert?: FeeIndexUpsertWithoutFeeEstimateInput
    disconnect?: FeeIndexWhereInput | boolean
    delete?: FeeIndexWhereInput | boolean
    connect?: FeeIndexWhereUniqueInput
    update?: XOR<XOR<FeeIndexUpdateToOneWithWhereWithoutFeeEstimateInput, FeeIndexUpdateWithoutFeeEstimateInput>, FeeIndexUncheckedUpdateWithoutFeeEstimateInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FeeIndexUncheckedUpdateOneWithoutFeeEstimateNestedInput = {
    create?: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
    connectOrCreate?: FeeIndexCreateOrConnectWithoutFeeEstimateInput
    upsert?: FeeIndexUpsertWithoutFeeEstimateInput
    disconnect?: FeeIndexWhereInput | boolean
    delete?: FeeIndexWhereInput | boolean
    connect?: FeeIndexWhereUniqueInput
    update?: XOR<XOR<FeeIndexUpdateToOneWithWhereWithoutFeeEstimateInput, FeeIndexUpdateWithoutFeeEstimateInput>, FeeIndexUncheckedUpdateWithoutFeeEstimateInput>
  }

  export type FeeIndexCreateNestedManyWithoutMovingAverageInput = {
    create?: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput> | FeeIndexCreateWithoutMovingAverageInput[] | FeeIndexUncheckedCreateWithoutMovingAverageInput[]
    connectOrCreate?: FeeIndexCreateOrConnectWithoutMovingAverageInput | FeeIndexCreateOrConnectWithoutMovingAverageInput[]
    createMany?: FeeIndexCreateManyMovingAverageInputEnvelope
    connect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
  }

  export type FeeIndexUncheckedCreateNestedManyWithoutMovingAverageInput = {
    create?: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput> | FeeIndexCreateWithoutMovingAverageInput[] | FeeIndexUncheckedCreateWithoutMovingAverageInput[]
    connectOrCreate?: FeeIndexCreateOrConnectWithoutMovingAverageInput | FeeIndexCreateOrConnectWithoutMovingAverageInput[]
    createMany?: FeeIndexCreateManyMovingAverageInputEnvelope
    connect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
  }

  export type FeeIndexUpdateManyWithoutMovingAverageNestedInput = {
    create?: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput> | FeeIndexCreateWithoutMovingAverageInput[] | FeeIndexUncheckedCreateWithoutMovingAverageInput[]
    connectOrCreate?: FeeIndexCreateOrConnectWithoutMovingAverageInput | FeeIndexCreateOrConnectWithoutMovingAverageInput[]
    upsert?: FeeIndexUpsertWithWhereUniqueWithoutMovingAverageInput | FeeIndexUpsertWithWhereUniqueWithoutMovingAverageInput[]
    createMany?: FeeIndexCreateManyMovingAverageInputEnvelope
    set?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    disconnect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    delete?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    connect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    update?: FeeIndexUpdateWithWhereUniqueWithoutMovingAverageInput | FeeIndexUpdateWithWhereUniqueWithoutMovingAverageInput[]
    updateMany?: FeeIndexUpdateManyWithWhereWithoutMovingAverageInput | FeeIndexUpdateManyWithWhereWithoutMovingAverageInput[]
    deleteMany?: FeeIndexScalarWhereInput | FeeIndexScalarWhereInput[]
  }

  export type FeeIndexUncheckedUpdateManyWithoutMovingAverageNestedInput = {
    create?: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput> | FeeIndexCreateWithoutMovingAverageInput[] | FeeIndexUncheckedCreateWithoutMovingAverageInput[]
    connectOrCreate?: FeeIndexCreateOrConnectWithoutMovingAverageInput | FeeIndexCreateOrConnectWithoutMovingAverageInput[]
    upsert?: FeeIndexUpsertWithWhereUniqueWithoutMovingAverageInput | FeeIndexUpsertWithWhereUniqueWithoutMovingAverageInput[]
    createMany?: FeeIndexCreateManyMovingAverageInputEnvelope
    set?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    disconnect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    delete?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    connect?: FeeIndexWhereUniqueInput | FeeIndexWhereUniqueInput[]
    update?: FeeIndexUpdateWithWhereUniqueWithoutMovingAverageInput | FeeIndexUpdateWithWhereUniqueWithoutMovingAverageInput[]
    updateMany?: FeeIndexUpdateManyWithWhereWithoutMovingAverageInput | FeeIndexUpdateManyWithWhereWithoutMovingAverageInput[]
    deleteMany?: FeeIndexScalarWhereInput | FeeIndexScalarWhereInput[]
  }

  export type FeeEstimateCreateNestedOneWithoutFeeIndexInput = {
    create?: XOR<FeeEstimateCreateWithoutFeeIndexInput, FeeEstimateUncheckedCreateWithoutFeeIndexInput>
    connectOrCreate?: FeeEstimateCreateOrConnectWithoutFeeIndexInput
    connect?: FeeEstimateWhereUniqueInput
  }

  export type MovingAverageCreateNestedOneWithoutFeeIndexInput = {
    create?: XOR<MovingAverageCreateWithoutFeeIndexInput, MovingAverageUncheckedCreateWithoutFeeIndexInput>
    connectOrCreate?: MovingAverageCreateOrConnectWithoutFeeIndexInput
    connect?: MovingAverageWhereUniqueInput
  }

  export type FeeEstimateUpdateOneRequiredWithoutFeeIndexNestedInput = {
    create?: XOR<FeeEstimateCreateWithoutFeeIndexInput, FeeEstimateUncheckedCreateWithoutFeeIndexInput>
    connectOrCreate?: FeeEstimateCreateOrConnectWithoutFeeIndexInput
    upsert?: FeeEstimateUpsertWithoutFeeIndexInput
    connect?: FeeEstimateWhereUniqueInput
    update?: XOR<XOR<FeeEstimateUpdateToOneWithWhereWithoutFeeIndexInput, FeeEstimateUpdateWithoutFeeIndexInput>, FeeEstimateUncheckedUpdateWithoutFeeIndexInput>
  }

  export type MovingAverageUpdateOneRequiredWithoutFeeIndexNestedInput = {
    create?: XOR<MovingAverageCreateWithoutFeeIndexInput, MovingAverageUncheckedCreateWithoutFeeIndexInput>
    connectOrCreate?: MovingAverageCreateOrConnectWithoutFeeIndexInput
    upsert?: MovingAverageUpsertWithoutFeeIndexInput
    connect?: MovingAverageWhereUniqueInput
    update?: XOR<XOR<MovingAverageUpdateToOneWithWhereWithoutFeeIndexInput, MovingAverageUpdateWithoutFeeIndexInput>, MovingAverageUncheckedUpdateWithoutFeeIndexInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type FeeIndexCreateWithoutFeeEstimateInput = {
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    movingAverage: MovingAverageCreateNestedOneWithoutFeeIndexInput
  }

  export type FeeIndexUncheckedCreateWithoutFeeEstimateInput = {
    id?: number
    movingAverageId: number
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type FeeIndexCreateOrConnectWithoutFeeEstimateInput = {
    where: FeeIndexWhereUniqueInput
    create: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
  }

  export type FeeIndexUpsertWithoutFeeEstimateInput = {
    update: XOR<FeeIndexUpdateWithoutFeeEstimateInput, FeeIndexUncheckedUpdateWithoutFeeEstimateInput>
    create: XOR<FeeIndexCreateWithoutFeeEstimateInput, FeeIndexUncheckedCreateWithoutFeeEstimateInput>
    where?: FeeIndexWhereInput
  }

  export type FeeIndexUpdateToOneWithWhereWithoutFeeEstimateInput = {
    where?: FeeIndexWhereInput
    data: XOR<FeeIndexUpdateWithoutFeeEstimateInput, FeeIndexUncheckedUpdateWithoutFeeEstimateInput>
  }

  export type FeeIndexUpdateWithoutFeeEstimateInput = {
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movingAverage?: MovingAverageUpdateOneRequiredWithoutFeeIndexNestedInput
  }

  export type FeeIndexUncheckedUpdateWithoutFeeEstimateInput = {
    id?: IntFieldUpdateOperationsInput | number
    movingAverageId?: IntFieldUpdateOperationsInput | number
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexCreateWithoutMovingAverageInput = {
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    feeEstimate: FeeEstimateCreateNestedOneWithoutFeeIndexInput
  }

  export type FeeIndexUncheckedCreateWithoutMovingAverageInput = {
    id?: number
    feeEstimateId: number
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type FeeIndexCreateOrConnectWithoutMovingAverageInput = {
    where: FeeIndexWhereUniqueInput
    create: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput>
  }

  export type FeeIndexCreateManyMovingAverageInputEnvelope = {
    data: FeeIndexCreateManyMovingAverageInput | FeeIndexCreateManyMovingAverageInput[]
    skipDuplicates?: boolean
  }

  export type FeeIndexUpsertWithWhereUniqueWithoutMovingAverageInput = {
    where: FeeIndexWhereUniqueInput
    update: XOR<FeeIndexUpdateWithoutMovingAverageInput, FeeIndexUncheckedUpdateWithoutMovingAverageInput>
    create: XOR<FeeIndexCreateWithoutMovingAverageInput, FeeIndexUncheckedCreateWithoutMovingAverageInput>
  }

  export type FeeIndexUpdateWithWhereUniqueWithoutMovingAverageInput = {
    where: FeeIndexWhereUniqueInput
    data: XOR<FeeIndexUpdateWithoutMovingAverageInput, FeeIndexUncheckedUpdateWithoutMovingAverageInput>
  }

  export type FeeIndexUpdateManyWithWhereWithoutMovingAverageInput = {
    where: FeeIndexScalarWhereInput
    data: XOR<FeeIndexUpdateManyMutationInput, FeeIndexUncheckedUpdateManyWithoutMovingAverageInput>
  }

  export type FeeIndexScalarWhereInput = {
    AND?: FeeIndexScalarWhereInput | FeeIndexScalarWhereInput[]
    OR?: FeeIndexScalarWhereInput[]
    NOT?: FeeIndexScalarWhereInput | FeeIndexScalarWhereInput[]
    id?: IntFilter<"FeeIndex"> | number
    feeEstimateId?: IntFilter<"FeeIndex"> | number
    movingAverageId?: IntFilter<"FeeIndex"> | number
    ratioLast365Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFilter<"FeeIndex"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"FeeIndex"> | Date | string
  }

  export type FeeEstimateCreateWithoutFeeIndexInput = {
    time: Date | string
    satsPerByte: Decimal | DecimalJsLike | number | string
  }

  export type FeeEstimateUncheckedCreateWithoutFeeIndexInput = {
    id?: number
    time: Date | string
    satsPerByte: Decimal | DecimalJsLike | number | string
  }

  export type FeeEstimateCreateOrConnectWithoutFeeIndexInput = {
    where: FeeEstimateWhereUniqueInput
    create: XOR<FeeEstimateCreateWithoutFeeIndexInput, FeeEstimateUncheckedCreateWithoutFeeIndexInput>
  }

  export type MovingAverageCreateWithoutFeeIndexInput = {
    last365Days: Decimal | DecimalJsLike | number | string
    last30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type MovingAverageUncheckedCreateWithoutFeeIndexInput = {
    id?: number
    last365Days: Decimal | DecimalJsLike | number | string
    last30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type MovingAverageCreateOrConnectWithoutFeeIndexInput = {
    where: MovingAverageWhereUniqueInput
    create: XOR<MovingAverageCreateWithoutFeeIndexInput, MovingAverageUncheckedCreateWithoutFeeIndexInput>
  }

  export type FeeEstimateUpsertWithoutFeeIndexInput = {
    update: XOR<FeeEstimateUpdateWithoutFeeIndexInput, FeeEstimateUncheckedUpdateWithoutFeeIndexInput>
    create: XOR<FeeEstimateCreateWithoutFeeIndexInput, FeeEstimateUncheckedCreateWithoutFeeIndexInput>
    where?: FeeEstimateWhereInput
  }

  export type FeeEstimateUpdateToOneWithWhereWithoutFeeIndexInput = {
    where?: FeeEstimateWhereInput
    data: XOR<FeeEstimateUpdateWithoutFeeIndexInput, FeeEstimateUncheckedUpdateWithoutFeeIndexInput>
  }

  export type FeeEstimateUpdateWithoutFeeIndexInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FeeEstimateUncheckedUpdateWithoutFeeIndexInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    satsPerByte?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type MovingAverageUpsertWithoutFeeIndexInput = {
    update: XOR<MovingAverageUpdateWithoutFeeIndexInput, MovingAverageUncheckedUpdateWithoutFeeIndexInput>
    create: XOR<MovingAverageCreateWithoutFeeIndexInput, MovingAverageUncheckedCreateWithoutFeeIndexInput>
    where?: MovingAverageWhereInput
  }

  export type MovingAverageUpdateToOneWithWhereWithoutFeeIndexInput = {
    where?: MovingAverageWhereInput
    data: XOR<MovingAverageUpdateWithoutFeeIndexInput, MovingAverageUncheckedUpdateWithoutFeeIndexInput>
  }

  export type MovingAverageUpdateWithoutFeeIndexInput = {
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovingAverageUncheckedUpdateWithoutFeeIndexInput = {
    id?: IntFieldUpdateOperationsInput | number
    last365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    last30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexCreateManyMovingAverageInput = {
    id?: number
    feeEstimateId: number
    ratioLast365Days: Decimal | DecimalJsLike | number | string
    ratioLast30Days: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
  }

  export type FeeIndexUpdateWithoutMovingAverageInput = {
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feeEstimate?: FeeEstimateUpdateOneRequiredWithoutFeeIndexNestedInput
  }

  export type FeeIndexUncheckedUpdateWithoutMovingAverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeEstimateId?: IntFieldUpdateOperationsInput | number
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeeIndexUncheckedUpdateManyWithoutMovingAverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    feeEstimateId?: IntFieldUpdateOperationsInput | number
    ratioLast365Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ratioLast30Days?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MovingAverageCountOutputTypeDefaultArgs instead
     */
    export type MovingAverageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovingAverageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeeEstimateDefaultArgs instead
     */
    export type FeeEstimateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeeEstimateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovingAverageDefaultArgs instead
     */
    export type MovingAverageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovingAverageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeeIndexDefaultArgs instead
     */
    export type FeeIndexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeeIndexDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}